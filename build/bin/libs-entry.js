/**
 * 000.该指令作用：动态读取src/packages下面所有的组件，写入到index.js这个文件作为统一输出所有组件的入口
 * 1.用globals读取src/packages下面的文件夹，获取文件夹名就是组件吗，获取文件下面的index.js是每个组件的入口文件
 * 2.用json-templater/string来拼接输出所有组件的index.js文件里面的内容
 * 3.用fs.writeFileSync来把拼接的内容写入index.js文件里
 */
const path = require("path");
const fs = require("fs");
const glob = require("glob");
const uppercamelcase = require("uppercamelcase");
const render = require('json-templater/string');
var endOfLine = require('os').EOL;
const componentsDir = path.join(__dirname,"../../src/packages/**/*.js");

const allComponentsFiles = glob.sync(componentsDir,"");

// 文件里面引入组件的模板
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
// index.js文件的输出模板，里面动态引入和导出所有组件
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/libs-entry.js' */

{{include}}

const components = [
  {{install}}
];

const install = function(Vue, opts = {}) {

  components.forEach(component => {
    Vue.component(component.name, component);
  });

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
  {{list}}
};
`;

const includeTemplate = []; //动态引入组件的集合 例如 import a from "a"
const includeComponents = []; //动态引入组件的组件数组集合例如 [a,b]
allComponentsFiles.forEach(c=>{
    const package = path.basename(path.dirname(c));
    const name = uppercamelcase(package);
    includeComponents.push(name);
    includeTemplate.push(render(IMPORT_TEMPLATE,{name,package}))
})
// console.log(includeTemplate)

const indexTemplate = render(MAIN_TEMPLATE,{
    include:includeTemplate.join(endOfLine),
    list:includeComponents.join(","+endOfLine),
    version: process.env.VERSION || require('../../package.json').version,
    install:includeComponents.join(","+endOfLine)})
// console.log(indexTemplate)

fs.writeFileSync(path.join(__dirname,"../../src/index.js"),indexTemplate);